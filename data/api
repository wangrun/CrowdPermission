WRITE_CONTACTS : <android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
WRITE_CONTACTS : <android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
WRITE_CONTACTS : <android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
WRITE_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
WRITE_CONTACTS : <android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
WRITE_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
WRITE_CONTACTS : <android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
WRITE_CONTACTS : <android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
WRITE_CONTACTS : <android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
WRITE_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
WRITE_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
WRITE_CONTACTS : <android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
WRITE_CONTACTS : <android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
WRITE_CONTACTS : <android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
WRITE_CONTACTS : <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
WRITE_CONTACTS : <android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
WRITE_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
WRITE_CONTACTS : <android.widget.QuickContactBadge: void onClick(android.view.View)>
WRITE_CONTACTS : <android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
WRITE_CONTACTS : <android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
WRITE_CONTACTS : <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
WRITE_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
WRITE_CONTACTS : <android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
WRITE_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
WRITE_CONTACTS : <android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
WRITE_CONTACTS : <android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
ADD_VOICEMAIL : <android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
ADD_VOICEMAIL : <android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
ADD_VOICEMAIL : <android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
READ_CALENDAR : <android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
READ_CALENDAR : <android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
READ_CALENDAR : <android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
READ_CALENDAR : <android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
READ_CALENDAR : <android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
READ_CALENDAR : <android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
WRITE_EXTERNAL_STORAGE : <android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
WRITE_EXTERNAL_STORAGE : <android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
WRITE_EXTERNAL_STORAGE : <android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
RECORD_AUDIO : <android.speech.SpeechRecognizer: void stopListening()>
RECORD_AUDIO : <android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
RECORD_AUDIO : <android.speech.SpeechRecognizer: void cancel()>
RECORD_AUDIO : <android.media.AudioRecord: void <init>(int,int,int,int,int)>
RECORD_AUDIO : <android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
RECORD_AUDIO : <android.media.MediaRecorder: void setAudioSource(int)>
SEND_SMS : <android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
SEND_SMS : <android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
SEND_SMS : <android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
SEND_SMS : <android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
SEND_SMS : <android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
SEND_SMS : <android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
READ_CALL_LOG : <android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
ACCESS_COARSE_LOCATION : <android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
ACCESS_COARSE_LOCATION : <android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
ACCESS_COARSE_LOCATION : <android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: java.util.List getProviders(boolean)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
ACCESS_COARSE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
CAMERA : <android.media.MediaRecorder: void setVideoSource(int)>
CAMERA : <android.hardware.Camera: android.hardware.Camera open()>
READ_CONTACTS : <android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
READ_CONTACTS : <android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
READ_CONTACTS : <android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
READ_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
READ_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
READ_CONTACTS : <android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
READ_CONTACTS : <android.provider.ContactsContract$SyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
READ_CONTACTS : <android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
READ_CONTACTS : <android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
READ_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
READ_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
READ_CONTACTS : <android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
READ_CONTACTS : <android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
READ_CONTACTS : <android.provider.ContactsContract$SyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
READ_CONTACTS : <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
READ_CONTACTS : <android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
READ_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)>
READ_CONTACTS : <android.widget.QuickContactBadge: void onClick(android.view.View)>
READ_CONTACTS : <android.provider.ContactsContract$SyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)>
READ_CONTACTS : <android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
READ_CONTACTS : <android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
READ_CONTACTS : <android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])>
READ_CONTACTS : <android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
READ_CONTACTS : <android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
READ_CONTACTS : <android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
READ_CONTACTS : <android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
ACCESS_FINE_LOCATION : <android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
ACCESS_FINE_LOCATION : <android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
ACCESS_FINE_LOCATION : <android.location.LocationManager: java.util.List getProviders(boolean)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
ACCESS_FINE_LOCATION : <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
READ_PHONE_STATE : <android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getLine1Number()>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
READ_PHONE_STATE : <android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
READ_PHONE_STATE : <android.telephony.TelephonyManager: java.lang.String getDeviceId()>
WRITE_CALENDAR : <android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
